use mavenmovies;

-- Basic Aggregate Functions:

-- Question 1:
-- Retrieve the total number of rentals made in the Sakila database.
select count(*)as total_no_of_rentals from rental;

-- Question 2:
-- Find the average rental duration (in days) of movies rented from the Sakila database.
select avg(datediff(return_date, rental_date)) as average_rental_duration from rental;

-- String Functions:

-- Question 3:
-- Display the first name and last name of customers in uppercase.
select upper(first_name) as upper_fast_name, upper(last_name) as upper_last_name from customer;

-- Question 4:
-- Extract the month from the rental date and display it alongside the rental ID.
select rental_id, month(rental_date) as rental_month from rental;

-- GROUP BY:

-- Question 5:
-- Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
select customer_id, count(rental_id) as rental_count from rental group by customer_id;

-- Question 6:
-- Find the total revenue generated by each store.
SELECT 
    s.store_id, SUM(p.amount) AS total_revenue
FROM
    store s
        JOIN
    staff sf ON s.store_id = sf.store_id
        LEFT JOIN
    payment p ON sf.staff_id = p.staff_id
GROUP BY s.store_id;

-- Joins:

-- Question 7:
-- Display the title of the movie, customer s first name, and last name who rented it.
SELECT 
    f.title AS movie_title, c.first_name, c.last_name
FROM
    film f
		INNER JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
        JOIN
    customer c ON r.customer_id = c.customer_id;

-- Question 8:
-- Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
SELECT 
    a.first_name, a.last_name
FROM
    actor a
        INNER JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        JOIN
    film f ON fa.film_id = f.film_id
WHERE
    f.title = 'Gone with the wind';

-- GROUP BY:

-- Question 1:
-- Determine the total number of rentals for each category of movies.
SELECT 
    fc.category_id, COUNT(r.rental_id) AS rental_count
FROM
    rental r
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    film f ON i.film_id = f.film_id
        JOIN
    film_category fc ON f.film_id = fc.film_id
GROUP BY fc.category_id;

-- Question 2:
-- Find the average rental rate of movies in each language.
SELECT 
    language.name AS langauge_name,
    AVG(film.rental_rate) AS avereage_rental_rate
FROM
    film
        JOIN
    language ON film.language_id = language.language_id
GROUP BY language.name;

-- Joins:

-- Question 3:
-- Retrieve the customer names along with the total amount they've spent on rentals.
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    SUM(payment.amount) AS total_amount_spent
FROM
    customer c
        JOIN
    payment ON c.customer_id = payment.customer_id
GROUP BY c.customer_id , c.first_name , c.last_name;

-- Question 4:
-- List the titles of movies rented by each customer in a particular city (e.g., 'London').
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    film.title AS movietitle
FROM
    customer c
        JOIN
    address a ON c.address_id = a.address_id
        JOIN
    city ON a.city_id = city.city_id
        JOIN
    rental r ON c.customer_id = r.customer_id
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    film ON i.film_id = film.film_id
WHERE
    city.city = 'London'
ORDER BY c.customer_id , film.title;

-- Advanced Joins and GROUP BY:

-- Question 5:
-- Display the top 5 rented movies along with the number of times they've been rented.
SELECT 
    f.title AS movie_title, COUNT(*) AS rental_count
FROM
    film f
        JOIN
    inventory i ON f.film_id = i.film_id
        JOIN
    rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 5;

-- Question 6:
-- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
SELECT 
    c.customer_id, c.first_name, c.last_name
FROM
    customer c
        JOIN
    rental r ON c.customer_id = r.customer_id
        JOIN
    inventory i ON r.inventory_id = i.inventory_id
        JOIN
    store s ON i.store_id = s.store_id
WHERE
    s.store_id IN (1 , 2)
GROUP BY c.customer_id , c.first_name , c.last_name
HAVING COUNT(DISTINCT s.store_id) = 2;
























